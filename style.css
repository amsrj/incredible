/* Reset */
body {
    margin: unset;
}

/* CSS Variables */
:root {
    /* Color */
    /* CSS Variable을 활용하여 색상 정보 체계적 관리 */
    --color-white: #fff;
    --color-gray-50: #999;
    --color-gray-80: #222;
    --color-gray-90: #111;
    --color-black: #000;
}

/* Component */
body {
    background-color: var(--color-gray-80);
}

.wrapper {
    margin: 60px auto;

    /* .wrapper에 좌우 패딩을 기본적으로 제공 / 뷰포트 사이즈가 작아져도 좌우로 기본적인 여유를 부여함 */
    padding: 0 30px;

    /* 컨테이닝 블록 기준으로 가득 차려고 시도 */
    width: auto;

    /* 가득 차는 상황에서 최대치로 커질 수 있는 너비를 제한 */
    max-width: 1200px;
}

.article {
    background-color: var(--color-gray-90);
    color: var(--color-gray-50);
}

.article-cover {
    box-shadow: inset 0 0 20px red;

    /* 비율을 유지하는 블록 레벨 요소를 만든당 */
    aspect-ratio: 16 / 9;

    /* min-height가 내부 콘텐츠 높이만큼 강제 (auto가 그렇게 계산된당) */
    /*
        min-height: 0; 
        auto가 아닌 값으로 만들어줘서 내부 콘텐츠 높이와 관계없이 aspect-ratio가 유지되게 함 
    */

    /* min-height 컨트롤하는 것 말고, overflow속성을 이용함으로서도 자식요소가 부모요소의 높이에 영향을 끼치는 것을 막을수 있다. */
    overflow: hidden;
}

.article-main {
    box-shadow: inset 0 0 20px blue;
}